{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to the unofficial live remote scripts docs. This is an attempt to document what i have learned while writing my custom user remote script for Ableton Live. This Documentation is intended to be written by the ableton live community to make it easier for users to write their own custom remote scripts.</p> <p>Special thanks to gabrielyshay for his article on how to make a control surface for Ableton  which truly helped me out on getting started with writing my own custom script and therefore this documentation.</p>"},{"location":"contribution/","title":"Contribution","text":"<p>This documentation is unofficial and created solely by digging through the decompiled python libraries for creating Custom Remote Scripts. Feel free to contribute by creating a PR to this documentation.</p>"},{"location":"getting_started/","title":"Getting Started","text":"<p>Before getting started, there are a few things to note.</p>"},{"location":"getting_started/#documentation-example-project","title":"Documentation Example Project","text":"<p>To elaborate the Remote Scripts API we will explain all the necessary parts by building an example remote control script for the BCR2000 which is a Midi Controller with 32 Encoders and 20 assignable Buttons.</p> <p>TODO decompiled bytecode</p> <p>TODO how to Setup</p> <p>TODO Tailing the logs</p>"},{"location":"api/listeners/","title":"Event Listeners","text":""},{"location":"api/live_object_model/","title":"The Live Object Model","text":""},{"location":"api/main_components/","title":"Remote Script API Main Components","text":""},{"location":"api/main_components/#__init__","title":"<code>__init__</code>","text":"<p>If you are new to python, you might have recognized, that within each directory in a python project, there is a <code>__init__.py</code> file. This file initializes a regular python package and everything within this file is executed when the package is imported.</p> <p>The entrypoint for every Custom Remote Script is the <code>create_instance</code> function within the <code>__init__</code> file. The function needs to return your custom implementation of the <code>ControlSurface</code>. The function has one call argument <code>c_instance</code> which I guess is an instance of some Custom Remote Script abstraction from the Live core which is written in C++.</p> <p>Live will (most probably) call this function upon application start.</p> <pre><code>def create_instance(c_instance) -&gt; ControlSurface:\n    return CustomBCR2000(c_instance=c_instance)\n</code></pre> <p>Whenever the import of this file, or the call of the <code>create_instance</code> function errors, your remote script will not be available in Live.</p>"},{"location":"api/main_components/#specification","title":"<code>Specification</code>","text":""},{"location":"api/main_components/#controlsurface","title":"<code>ControlSurface</code>","text":"<p>The Control Surface represents your controller. Each control surface is instantiated once it is selected in Live. You need to inherit from this class.</p> <pre><code>class CustomBCR2000(ControlSurface):\n    # TODO Override init and provide specification\n    # log a message\n    # setup function\n</code></pre>"},{"location":"api/main_components/#component","title":"<code>Component</code>","text":""},{"location":"api/main_components/#elements","title":"<code>Elements</code>","text":""}]}